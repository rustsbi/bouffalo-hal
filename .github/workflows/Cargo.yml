name: Cargo

on: [push, pull_request]

env:
  CARGO_TERM_COLOR: always
  # By default, RUSTFLAGS with “-D warnings” turns “asm_const” warnings into errors.
  RUSTFLAGS:

jobs:
  fmt:
    name: Rustfmt all packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          components: rustfmt
      - name: Rustfmt Check
        uses: actions-rust-lang/rustfmt@v1
  
  test-bouffalo-hal:
    name: Test
    needs: fmt
    runs-on: ubuntu-latest
    strategy:
      matrix:
        PACKAGE: [bouffalo-hal, bouffalo-rt, blri]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
      - name: Run tests
        run: cargo test -p ${{ MATRIX.PACKAGE }}

  build-bouffalo-hal-riscv64:
    name: Build for riscv64
    needs: fmt
    runs-on: ubuntu-latest
    strategy:
      matrix:
        TARGET: [riscv64imac-unknown-none-elf]
        TOOLCHAIN: [nightly]
        EXAMPLES: [gpio-demo, i2c-demo, jtag-demo, lz4d-demo, psram-demo, pwm-demo, 
          sdcard-demo, sdcard-gpt-demo, sdh-demo, sdh-dma-demo, spi-demo, uart-demo, uart-async-demo, uart-cli-demo]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ MATRIX.TARGET }}
          toolchain: ${{ MATRIX.TOOLCHAIN }}
      - name: Run build
        run: cargo build --target ${{ MATRIX.TARGET }} --release -p ${{ MATRIX.EXAMPLES }}

  build-bouffalo-hal-riscv32:
    name: Build for riscv32
    needs: fmt
    runs-on: ubuntu-latest
    strategy:
      matrix:
        TARGET: [riscv32imac-unknown-none-elf]
        TOOLCHAIN: [nightly]
        EXAMPLES: [uart-dma-demo]
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          target: ${{ MATRIX.TARGET }}
          toolchain: ${{ MATRIX.TOOLCHAIN }}
      - name: Run build
        run: cargo build --target ${{ MATRIX.TARGET }} --release -p ${{ MATRIX.EXAMPLES }}
